TITLE:: Sleet
summary:: FX organization
categories:: Sleet
related:: Classes/NodeProxy 

DESCRIPTION::
Sleet contains a library of effect "modules" - synth functions that is - which are delivered in convenient formats for use in both link::Classes/NodeProxy:: based code and as SynthDefs.

A design goal for this project was to make an effect library which was as easy to use in multi channel situations as in stereo and mono.

code::
// Create library in stereo
z = Sleet.new(numChannels: 2);

// All modules in one flat IdentityDictionary
z.list;

// All modules organized by category
z.modules;

// If you know what you are looking for, the get method is the simplest:
z.get('chorus');
::

strong:: Naming convention ::

All SynthDefs have a suffix signifying the number of channels they were made for, eg. \binshift17 is a 17 channel bin shifter

This is not the case for the "modules" found in link::#-list:: and link::#-modules::. These have no suffix and a 17 channel binshifter is just called \binshift

CLASSMETHODS::

METHOD:: new

ARGUMENT:: numChannels

returns:: a Sleet

INSTANCEMETHODS::

method:: list
All modules in one flat IdentityDictionary

code::

// You can easily operate on this dictionary
z.list.keysValuesDo{|moduleName, moduleFunction|
	"Sleet contains module named %".format(moduleName).postln
}

::

method:: modules
All modules organized by category

code:: 
// See the categories
z.modules.keys;

// Get random delay module 
z.modules[\delay].choose; 
::

EXAMPLES::

code::

// Make the library stereo
z = Sleet.new(numChannels: 2);

// Simple example using Sleet to add fx to a panning PinkNoise source
(
	Ndef(\pinknoise, { Pan2.ar(PinkNoise.ar(0.5), SinOsc.kr(0.1)) });
	Ndef(\pinknoise)[1] = \filter -> z.get('delay');
	Ndef(\pinknoise).play;
)

// Now add a random spectral effect to the chain
Ndef(\pinknoise)[2] = \filter -> z.modules[\spectral].choose;

// Example using the SynthDefs: add a spectral binshift to a pattern
(
	Pfx(
		Pbind(\dur, 0.125, \degree, Pwhite(0,10)),
		\binshift2, 
		\wet, 0.5 // All the Sleet SynthDefs contain a 'wet' argument
	).play;
)
::

